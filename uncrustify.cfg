#
# uncrustify config file for objective-c and objective-c++
#


# The type of line endings
newlines                                 = auto       # auto/lf/crlf/cr

# The original size of tabs in the input
input_tab_size                           = 4        # number

# The size of tabs in the output (only used if align_with_tabs=true)
output_tab_size                          = 4        # number

# The ascii value of the string escape char, usually 92 (\) or 94 (^). (Pawn)
string_escape_char                       = 92       # number

# Alternate string escape char for Pawn. Only works right before the quote char.
string_escape_char2                      = 0        # number

#
# Indenting
#

# The number of columns to indent per level.
# Usually 2, 3, 4, or 8.
indent_columns                           = 4        # number

# How to use tabs when indenting code
# 0=spaces only
# 1=indent with tabs, align with spaces
# 2=indent and align with tabs
indent_with_tabs                         = 2        # number

# Whether to indent strings broken by '\' so that they line up
indent_align_string                      = true     # false/true

# The number of spaces to indent multi-line XML strings.
# Requires indent_align_string=True
indent_xml_string                        = 0        # number

# Spaces to indent '{' from level
indent_brace                             = 0        # number

# Whether braces are indented to the body level
indent_braces                            = false    # false/true

# Disabled indenting function braces if indent_braces is true
indent_braces_no_func                    = false    # false/true

# Indent based on the size of the brace parent, ie 'if' => 3 spaces, 'for' => 4 spaces, etc.
indent_brace_parent                      = false    # false/true

# Whether the 'namespace' body is indented
indent_namespace                         = false    # false/true

# Whether the 'extern "C"' body is indented
indent_extern                            = false    # false/true

# Whether the 'class' body is indented
indent_class                             = true     # false/true

# Whether to indent the stuff after a leading class colon
indent_class_colon                       = true     # false/true

# False=treat 'else\nif' as 'else if' for indenting purposes
# True=indent the 'if' one level
indent_else_if                           = false    # false/true

# Amount to indent variable declarations after a open brace. neg=relative, pos=absolute
indent_var_def_blk                       = 0        # number

# True:  indent continued function call parameters one indent level
# False: align parameters under the open paren
indent_func_call_param                   = false    # false/true

# Same as indent_func_call_param, but for function defs
indent_func_def_param                    = false    # false/true

# Same as indent_func_call_param, but for function protos
indent_func_proto_param                  = false    # false/true

# Same as indent_func_call_param, but for class declarations
indent_func_class_param                  = false    # false/true

# Same as indent_func_call_param, but for class variable constructors
indent_func_ctor_var_param               = false    # false/true

# Same as indent_func_call_param, but for templates
indent_template_param                    = false    # false/true

# Double the indent for indent_func_xxx_param options
indent_func_param_double                 = false    # false/true

# Indentation column for standalone 'const' function decl/proto qualifier
indent_func_const                        = 0        # number

# Indentation column for standalone 'throw' function decl/proto qualifier
indent_func_throw                        = 0        # number

# The number of spaces to indent a continued '->' or '.'
# Usually set to 0, 1, or indent_columns.
indent_member                            = indent_columns        # number

# Spaces to indent single line ('//') comments on lines before code
indent_sing_line_comments                = 0        # number

# If set, will indent trailing single line ('//') comments relative
# to the code instead of trying to keep the same absolute column
indent_relative_single_line_comments     = false    # false/true

# Spaces to indent 'case' from 'switch'
# Usually 0 or indent_columns.
indent_switch_case                       = indent_columns        # number

# Spaces to shift the 'case' line, without affecting any other lines
# Usually 0.
indent_case_shift                        = 0        # number

# Spaces to indent '{' from 'case'.
# By default, the brace will appear under the 'c' in case.
# Usually set to 0 or indent_columns.
indent_case_brace                        = indent_columns        # number

# Whether to indent comments found in first column
indent_col1_comment                      = false    # false/true

# How to indent goto labels
#  >0 : absolute column where 1 is the leftmost column
#  <=0 : subtract from brace indent
indent_label                             = 1        # number

# Same as indent_label, but for access specifiers that are followed by a colon
indent_access_spec                       = 1        # number

# Indent the code after an access specifier by one level.
# If set, this option forces 'indent_access_spec=0'
indent_access_spec_body                  = false    # false/true

# If an open paren is followed by a newline, indent the next line so that it lines up after the open paren (not recommended)
indent_paren_nl                          = false    # false/true

# Controls the indent of a close paren after a newline.
# 0: Indent to body level
# 1: Align under the open paren
# 2: Indent to the brace level
indent_paren_close                       = 1        # number

# Controls the indent of a comma when inside a paren.If TRUE, aligns under the open paren
indent_comma_paren                       = false    # false/true

# Controls the indent of a BOOL operator when inside a paren.If TRUE, aligns under the open paren
indent_bool_paren                        = false    # false/true

# If an open square is followed by a newline, indent the next line so that it lines up after the open square (not recommended)
indent_square_nl                         = false    # false/true

# Don't change the relative indent of ESQL/C 'EXEC SQL' bodies
indent_preserve_sql                      = false    # false/true

# Align continued statements at the '='. Default=True
# If FALSE or the '=' is followed by a newline, the next line is indent one tab.
indent_align_assign                      = true     # false/true


#
# Inter-symbol newlines
#

nl_enum_brace           = remove   # "enum {" vs "enum \n {"
nl_union_brace          = remove   # "union {" vs "union \n {"
nl_struct_brace         = remove   # "struct {" vs "struct \n {"
nl_do_brace             = remove   # "do {" vs "do \n {"
nl_if_brace             = remove   # "if () {" vs "if () \n {"
nl_for_brace            = remove   # "for () {" vs "for () \n {"
nl_else_brace           = remove   # "else {" vs "else \n {"
nl_while_brace          = remove   # "while () {" vs "while () \n {"
nl_switch_brace         = remove   # "switch () {" vs "switch () \n {"
nl_brace_while          = remove   # "} while" vs "} \n while" - cuddle while
nl_brace_else           = remove   # "} else" vs "} \n else" - cuddle else
nl_func_var_def_blk     = 1
nl_fcall_brace          = remove   # "list_for_each() {" vs "list_for_each()\n{"
nl_fdef_brace           = force   # "int foo() {" vs "int foo()\n{"
nl_after_return         = true
nl_before_case          = true
nl_after_case           = true
# Whether to collapse empty blocks between '{' and '}'
nl_collapse_empty_body  = true    # false/true

# Add or remove newlines at the start of the file
nl_start_of_file                         = remove   # ignore/add/remove/force

# The number of newlines at the start of the file (only used if nl_start_of_file is 'add' or 'force'
nl_start_of_file_min                     = 0        # number

# Add or remove newline at the end of the file
nl_end_of_file                           = force    # ignore/add/remove/force

# The number of newlines at the end of the file (only used if nl_end_of_file is 'add' or 'force')
nl_end_of_file_min                       = 1        # number

nl_comment_func_def     = 1
nl_else_if              = remove
nl_elseif_brace         = remove
nl_else_brace           = remove
# Add or remove newline before 'if'
nl_before_if            = force   # ignore/add/remove/force
# Add or remove newline after 'if'
nl_after_if             = force   # ignore/add/remove/force
# Add or remove newline before 'while'
nl_before_while         = force   # ignore/add/remove/force
# Add or remove newline after 'while'
nl_after_while          = force   # ignore/add/remove/force
# Add or remove newline before 'for'
nl_before_for           = force   # ignore/add/remove/force
# Add or remove newline after 'for'
nl_after_for            = force   # ignore/add/remove/force

# Whether to alter newlines in '#define' macros
nl_define_macro         = true    # false/true

# Whether to not put blanks after '#ifxx', '#elxx', or before '#endif'
nl_squeeze_ifdef      = true     # false/true

#
# Source code modifications
#

mod_paren_on_return                       = remove      # "return 1;" vs "return (1);"
mod_full_brace_if                         = add       # "if (a) a--;" vs "if (a) { a--; }"
mod_full_brace_for                        = add       # "for () a--;" vs "for () { a--; }"
mod_full_brace_do                         = add       # "do a--; while ();" vs "do { a--; } while ();"
mod_full_brace_while                      = add     # "while (a) a--;" vs "while (a) { a--; }"
mod_add_long_ifdef_endif_comment          = 20
mod_add_long_ifdef_else_comment           = mod_add_long_ifdef_else_comment
mod_add_long_switch_closebrace_comment    = mod_add_long_ifdef_else_comment
mod_add_long_function_closebrace_comment  = mod_add_long_ifdef_else_comment
# Add parens on 'while' and 'if' statement around bools
mod_full_paren_if_bool                    = true        # false/true
# Whether to remove superfluous semicolons
mod_remove_extra_semicolon                = true        # false/true
# If TRUE, it will remove a void 'return;' that appears as the last statement in a function.
mod_remove_empty_return                   = true        # false/true



#
# Inter-character spacing options
#

sp_return_paren              = force      # "return (1);" vs "return(1);"
sp_sizeof_paren              = remove  # "sizeof (int)" vs "sizeof(int)"
sp_before_sparen             = force      # "if (" vs "if("
sp_after_sparen              = force      # "if () {" vs "if (){"
sp_after_cast                = remove  # "(int) a" vs "(int)a"
sp_inside_braces             = force     # "{ 1 }" vs "{1}"
sp_inside_braces_struct      = force     # "{ 1 }" vs "{1}"
sp_inside_braces_enum        = force     # "{ 1 }" vs "{1}"

# Add or remove space inside empty function '()'
sp_inside_fparens                        = remove   # ignore/add/remove/force

# Add or remove space inside function '(' and ')'
sp_inside_fparen                         = remove   # ignore/add/remove/force

# Add or remove space between ']' and '(' when part of a function call.
sp_square_fparen                         = remove   # ignore/add/remove/force

# Add or remove space between ')' and '{' of function
sp_fparen_brace                          = force   # ignore/add/remove/force

sp_inside_paren              = remove
sp_paren_brace               = force
sp_paren_paren               = remove
sp_balance_nested_parens     = false
sp_assign                    = force
sp_arith                     = force
sp_bool                      = force
sp_compare                   = force
sp_assign                    = force
sp_after_comma               = force
sp_func_def_paren            = remove  # "int foo (){" vs "int foo(){"
sp_func_call_paren           = remove  # "foo (" vs "foo("
sp_func_proto_paren          = remove  # "int foo ();" vs "int foo();"
sp_before_ptr_star           = force
sp_after_ptr_star            = remove
sp_before_unnamed_ptr_star   = force
sp_between_ptr_star          = remove
sp_after_ptr_star_func       = remove
sp_before_ptr_star_func      = force
sp_cmt_cpp_start             = ignore
sp_cond_question             = force
sp_cond_colon                = force
sp_else_brace                = force
sp_brace_else                = force

# Add or remove space between '}' and the name of a typedef on the same line
sp_brace_typedef             = force   # ignore/add/remove/force

sp_after_class_colon         = force
sp_before_class_colon        = force
sp_before_case_colon         = remove
sp_after_invariant_paren     = force

# Objective-C specifics
# Add or remove space after the scope '+' or '-', as in '-(void) foo;' or '+(int) bar;'
sp_after_oc_scope                        = force   # ignore/add/remove/force

# Add or remove space after the colon in message specs
# '-(int) f:(int) x;' vs '-(int) f: (int) x;'
sp_after_oc_colon                        = remove   # ignore/add/remove/force

# Add or remove space before the colon in message specs
# '-(int) f: (int) x;' vs '-(int) f : (int) x;'
sp_before_oc_colon                       = remove   # ignore/add/remove/force

# Add or remove space after the colon in message specs
# '[object setValue:1];' vs '[object setValue: 1];'
sp_after_send_oc_colon                   = remove   # ignore/add/remove/force

# Add or remove space before the colon in message specs
# '[object setValue:1];' vs '[object setValue :1];'
sp_before_send_oc_colon                  = remove   # ignore/add/remove/force

# Add or remove space after the (type) in message specs
# '-(int)f: (int) x;' vs '-(int)f: (int)x;'
sp_after_oc_type                         = remove   # ignore/add/remove/force

# Add or remove space after the first (type) in message specs
# '-(int) f:(int)x;' vs '-(int)f:(int)x;'
sp_after_oc_return_type                  = remove   # ignore/add/remove/force

# Add or remove space between '@selector' and '('
# '@selector(msgName)' vs '@selector (msgName)'
# Also applies to @protocol() constructs
sp_after_oc_at_sel                       = remove   # ignore/add/remove/force

# Add or remove space between '@selector(x)' and the following word
# '@selector(foo) a:' vs '@selector(foo)a:'
sp_after_oc_at_sel_parens                = force   # ignore/add/remove/force

# Add or remove space inside '@selector' parens
# '@selector(foo)' vs '@selector( foo )'
# Also applies to @protocol() constructs
sp_inside_oc_at_sel_parens               = remove   # ignore/add/remove/force

# Add or remove space before a block pointer caret
# '^int (int arg){...}' vs. ' ^int (int arg){...}'
sp_before_oc_block_caret                 = remove   # ignore/add/remove/force

# Add or remove space after a block pointer caret
# '^int (int arg){...}' vs. '^ int (int arg){...}'
sp_after_oc_block_caret                  = remove   # ignore/add/remove/force

#
# Code alignment (not left column spaces/tabs)
#

# Whether to keep non-indenting tabs
align_keep_tabs                          = false    # false/true

# Whether to use tabs for alinging
align_with_tabs                          = true    # false/true

# Whether to bump out to the next tab when aligning
align_on_tabstop                         = true    # false/true

# Whether to left-align numbers
align_number_left                        = false     # false/true

# Align variable definitions in prototypes and functions
align_func_params                        = true     # false/true

# Align parameters in single-line functions that have the same name.
# The function names must already be aligned with each other.
align_same_func_call_params              = false    # false/true

# The span for aligning variable definitions (0=don't align)
align_var_def_span                       = 1        # number

# How to align the star in variable definitions.
#  0=Part of the type     'void *   foo;'
#  1=Part of the variable 'void     *foo;'
#  2=Dangling             'void    *foo;'
align_var_def_star_style                 = 2        # number

# How to align the '&' in variable definitions.
#  0=Part of the type
#  1=Part of the variable
#  2=Dangling
align_var_def_amp_style                  = 2        # number

# The threshold for aligning variable definitions (0=no limit)
align_var_def_thresh                     = 0       # number

# The gap for aligning variable definitions
align_var_def_gap                        = 1        # number

# Whether to align the colon in struct bit fields
align_var_def_colon                      = true     # false/true

# Whether to align any attribute after the variable name
align_var_def_attribute                  = false    # false/true

# Whether to align inline struct/enum/union variable definitions
align_var_def_inline                     = true     # false/true

# The span for aligning on '=' in assignments (0=don't align)
align_assign_span                        = 1        # number

# The threshold for aligning on '=' in assignments (0=no limit)
align_assign_thresh                      = 12       # number

# The span for aligning on '=' in enums (0=don't align)
align_enum_equ_span                      = 16       # number

# The threshold for aligning on '=' in enums (0=no limit)
align_enum_equ_thresh                    = 0        # number

# The span for aligning struct/union (0=don't align)
align_var_struct_span                    = 99       # number

# The threshold for aligning struct/union member definitions (0=no limit)
align_var_struct_thresh                  = 0        # number

# The gap for aligning struct/union member definitions
align_var_struct_gap                     = 0        # number

# The span for aligning struct initializer values (0=don't align)
align_struct_init_span                   = 3        # number

# The minimum space between the type and the synonym of a typedef
align_typedef_gap                        = 1        # number

# The span for aligning single-line typedefs (0=don't align)
align_typedef_span                       = 5        # number

# How to align typedef'd functions with other typedefs
# 0: Don't mix them at all
# 1: align the open paren with the types
# 2: align the function type name with the other type names
align_typedef_func                       = 2        # number

# Controls the positioning of the '*' in typedefs. Just try it.
# 0: Align on typdef type, ignore '*'
# 1: The '*' is part of type name: typedef int  *pint;
# 2: The '*' is part of the type, but dangling: typedef int *pint;
align_typedef_star_style                 = 2        # number

# Controls the positioning of the '&' in typedefs. Just try it.
# 0: Align on typdef type, ignore '&'
# 1: The '&' is part of type name: typedef int  &pint;
# 2: The '&' is part of the type, but dangling: typedef int &pint;
align_typedef_amp_style                  = 2        # number

# The span for aligning comments that end lines (0=don't align)
align_right_cmt_span                     = 3        # number

# If aligning comments, mix with comments after '}' and #endif with less than 3 spaces before the comment
align_right_cmt_mix                      = false    # false/true

# If a trailing comment is more than this number of columns away from the text it follows,
# it will qualify for being aligned.
align_right_cmt_gap                      = 0        # number

# Align trailing comment at or beyond column N; 'pulls in' comments as a bonus side effect (0=ignore)
align_right_cmt_at_col                   = 1        # number

# The span for aligning function prototypes (0=don't align)
align_func_proto_span                    = 0        # number

# Minimum gap between the return type and the function name.
align_func_proto_gap                     = 0        # number

# Align function protos on the 'operator' keyword instead of what follows
align_on_operator                        = false    # false/true

# Whether to mix aligning prototype and variable declarations.
# If true, align_var_def_XXX options are used instead of align_func_proto_XXX options.
align_mix_var_proto                      = true    # false/true

# Align single-line functions with function prototypes, uses align_func_proto_span
align_single_line_func                   = false    # false/true

# Aligning the open brace of single-line functions.
# Requires align_single_line_func=true, uses align_func_proto_span
align_single_line_brace                  = false    # false/true

# Gap for align_single_line_brace.
align_single_line_brace_gap              = 0        # number

# Span for aligning parameters in an Obj-C message call on the ':' (0=don't align)
align_oc_msg_colon_span                  = 1

# The span for aligning ObjC msg spec (0=don't align)
align_oc_msg_spec_span                   = 1        # number

# Aligning parameters in an Obj-C '+' or '-' declaration on the ':'
align_oc_decl_colon                      = true

# Whether to align macros wrapped with a backslash and a newline.
# This will not work right if the macro contains a multi-line comment.
align_nl_cont                            = true     # false/true

# The minimum space between label and value of a preprocessor define
align_pp_define_gap                      = 1        # number

# The span for aligning on '#define' bodies (0=don't align)
align_pp_define_span                     = 3        # number

# Align lines that start with '<<' with previous '<<'. Default=true
align_left_shift                         = true     # false/true


#
# Line Splitting options
#

# Try to limit code width to N number of columns
code_width                               = 0        # number

# Whether to fully split long 'for' statements at semi-colons
ls_for_split_full                        = false    # false/true

# Whether to fully split long function protos/calls at commas
ls_func_split_full                       = true    # false/true


#
# Blank line options
#

# The maximum consecutive newlines
nl_max                                   = 2        # number

# The number of newlines after a function prototype, if followed by another function prototype
nl_after_func_proto                      = 2        # number

# The number of newlines after a function prototype, if not followed by another function prototype
nl_after_func_proto_group                = 2        # number

# The number of newlines after '}' of a multi-line function body
nl_after_func_body                       = 2        # number

# The number of newlines after '}' of a single line function body
nl_after_func_body_one_liner             = 2        # number

# The minimum number of newlines before a multi-line comment.
# Doesn't apply if after a brace open or another multi-line comment.
nl_before_block_comment                  = 2        # number

# The minimum number of newlines before a single-line C comment.
# Doesn't apply if after a brace open or other single-line C comments.
nl_before_c_comment                      = 1        # number

# The minimum number of newlines before a CPP comment.
# Doesn't apply if after a brace open or other CPP comments.
nl_before_cpp_comment                    = 1        # number

# Whether to force a newline after a mulit-line comment.
nl_after_multiline_comment               = false    # false/true

# The number of newlines between a function def and the function comment.
# 0 = No change.
nl_comment_func_def                      = 1        # number

# The number of newlines after a try-catch-finally block that isn't followed by a brace close.
# 0 = No change.
nl_after_try_catch_finally               = 2        # number

# Whether to put a newline after a brace close.
# Does not apply if followed by a necessary ';'.
nl_after_brace_close                     = false    # false/true


# Whether to remove blank lines after '{'
eat_blanks_after_open_brace              = true     # false/true

# Whether to remove blank lines before '}'
eat_blanks_before_close_brace            = true     # false/true


# Control indent of preprocessors inside #if blocks at brace level 0
pp_indent                                = add   # ignore/add/remove/force

# Whether to indent #if/#else/#endif at the brace level (true) or from column 1 (false)
pp_indent_at_level                       = false    # false/true

# If pp_indent_at_level=false, specifies the number of columns to indent per level. Default=1.
pp_indent_count                          = 2        # number

# Add or remove space after # based on pp_level of #if blocks
pp_space                                 = remove   # ignore/add/remove/force

# Sets the number of spaces added with pp_space
pp_space_count                           = 0        # number

# If pp_indent_at_level=true, sets the indent for #if, #else, and #endif when not at file-level
pp_indent_if                             = 1        # number

# Control whether to indent the code between #if, #else and #endif when not at file-level
pp_if_indent_code                        = true    # false/true

# Whether to indent '#define' at the brace level (true) or from column 1 (false)
pp_define_at_level                       = false    # false/true


#
# Comment modifications
#

# Try to wrap comments at cmt_width columns
cmt_width                                = 0        # number

# If false, disable all multi-line comment changes, including cmt_width and leading chars.
# Default is true.
cmt_indent_multi                         = true     # false/true

# Whether to group c-comments that look like they are in a block
cmt_c_group                              = true    # false/true

# Whether to change cpp-comments into c-comments
cmt_cpp_to_c                             = false    # false/true

# Whether to group c-comments that look like they are in a block
cmt_c_group                              = true    # false/true

# Whether to group cpp-comments that look like they are in a block
cmt_cpp_group                            = true    # false/true

# Whether to put an empty '/*' on the first line of the combined c-comment
cmt_c_nl_start                           = false    # false/true

# Whether to put a newline before the closing '*/' of the combined c-comment
cmt_c_nl_end                             = true    # false/true

# Whether to group cpp-comments that look like they are in a block
cmt_cpp_group                            = false    # false/true

# Whether to put a star on subsequent comment lines
cmt_star_cont                            = true     # false/true

# The number of spaces to insert at the start of subsequent comment lines
cmt_sp_before_star_cont                  = 0        # number

# The number of spaces to insert after the star on subsequent comment lines
cmt_sp_after_star_cont                   = 2        # number

# Set the comment reflow mode (default: 0)
# 0: no reflowing (apart from the line wrapping due to cmt_width)
# 1: no touching at all
# 2: full reflow
cmt_reflow_mode                          = 2        # number

cmt_multi_check_last = true
